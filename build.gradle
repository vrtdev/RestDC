project.ext.libraries = [
    spring_webmvc: 'org.springframework:spring-webmvc:3.2.2.RELEASE',
    reflections: 'org.reflections:reflections:0.9.8',
    servlet_api: 'javax.servlet:servlet-api:2.5',
    junit: 'junit:junit:4.11',
    mockito_core: 'org.mockito:mockito-core:1.9.0',
    hamcrest_core: 'org.hamcrest:hamcrest-core:1.3',
    hamcrest_lib: 'org.hamcrest:hamcrest-library:1.3',
    logback: 'ch.qos.logback:logback-classic:1.0.13',
    jax_rs_api: 'javax.ws.rs:jsr311-api:1.1.1',
    slf4j: 'org.slf4j:slf4j-api:1.7.2'
]

ext {
    javaProjectsNames = ["RestDC-API", "RestDC-jax-rs", "RestDC-spring"]

    javaProjects = subprojects.findAll { it.name in javaProjectsNames }
}

subprojects {
    apply plugin: 'base'

    repositories {
        mavenLocal()
        maven {
            url "http://poprod01.servers.vrt.be:8081/nexus/content/groups/public"
        }

    }

    if (project in javaProjects) {
        apply plugin: 'java'
        sourceCompatibility = '1.7'
        group = 'be.vrt.web.rest-dc'
        version = '1.0-SNAPSHOT'

        dependencies {
            testCompile libraries.junit
            testCompile libraries.mockito_core
            testCompile libraries.hamcrest_core
            testCompile libraries.hamcrest_lib
            testRuntime libraries.logback
        }

        configurations {
            provided
        }

        sourceSets {
            main { compileClasspath += configurations.provided }
        }

        task sourcesJar(type: Jar, dependsOn: classes) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        task javadocJar(type: Jar, dependsOn: javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }

        artifacts {
            archives sourcesJar
            archives javadocJar
        }
    }
}


